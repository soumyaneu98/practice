/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.Customer;

import TheBusiness.Business.Business;
import TheBusiness.CustomerManagement.CustomerProfile;
import TheBusiness.MarketModel.Channel;
import TheBusiness.MarketModel.Market;
import TheBusiness.MarketModel.MarketChannelAssignment;
import TheBusiness.MarketModel.SolutionOffer;
import TheBusiness.MarketModel.SolutionOfferCatalog;
import TheBusiness.ProductManagement.Product;
import TheBusiness.SalesManagement.SalesPersonDirectory;
import TheBusiness.SalesManagement.SalesPersonProfile;
import TheBusiness.SolutionOrders.SolutionOrder;
import TheBusiness.Supplier.Supplier;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author HP
 */
public class OrderSolutionOfferJPanel extends javax.swing.JPanel {

    /**
     * Creates new form OrderSolutionOfferJPanel
     */
    JPanel CardSequencePanel;
    Business business;
    CustomerProfile cp;
     
    public OrderSolutionOfferJPanel(Business bz, JPanel jp, CustomerProfile cp) {
        CardSequencePanel = jp;
        this.business = bz;
        this.cp = cp;
        initComponents();
        
        populateCombo();
        populateSolutionOfferTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        validChannelComboBox = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblSolutionOffers = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        btnPlaceOrder = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txtQty = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        Back = new javax.swing.JButton();

        setBackground(new java.awt.Color(214, 173, 96));

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel1.setText("How did you know about us?");

        validChannelComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        validChannelComboBox.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        validChannelComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validChannelComboBoxActionPerformed(evt);
            }
        });

        tblSolutionOffers.setBackground(new java.awt.Color(0, 0, 0));
        tblSolutionOffers.setForeground(new java.awt.Color(255, 255, 255));
        tblSolutionOffers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Products", "Target Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblSolutionOffers.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblSolutionOffers);
        if (tblSolutionOffers.getColumnModel().getColumnCount() > 0) {
            tblSolutionOffers.getColumnModel().getColumn(0).setResizable(false);
            tblSolutionOffers.getColumnModel().getColumn(1).setResizable(false);
        }

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel2.setText("Customized Solution Offers");

        btnPlaceOrder.setBackground(new java.awt.Color(0, 0, 0));
        btnPlaceOrder.setFont(new java.awt.Font("Dialog", 3, 12)); // NOI18N
        btnPlaceOrder.setForeground(new java.awt.Color(255, 255, 255));
        btnPlaceOrder.setText("Place Order");
        btnPlaceOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlaceOrderActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel3.setText("Please enter quantity required");

        txtQty.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtQty.setText("1");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Solution Offers");

        Back.setBackground(new java.awt.Color(0, 0, 0));
        Back.setFont(new java.awt.Font("Dialog", 3, 12)); // NOI18N
        Back.setForeground(new java.awt.Color(255, 255, 255));
        Back.setText("<< Back");
        Back.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(346, 346, 346)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Back, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addGap(29, 29, 29)
                            .addComponent(validChannelComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(txtQty, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnPlaceOrder))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jLabel4)
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(validChannelComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPlaceOrder)
                    .addComponent(jLabel3)
                    .addComponent(txtQty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addComponent(Back)
                .addContainerGap(35, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void validChannelComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_validChannelComboBoxActionPerformed
        // TODO add your handling code here:
        populateSolutionOfferTable();
    }//GEN-LAST:event_validChannelComboBoxActionPerformed

    private void btnPlaceOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlaceOrderActionPerformed
        // TODO add your handling code here:
        if(cp.getSalesPerson()==null)
        {
            JOptionPane.showMessageDialog(null, "Please contact admin to be directed to a sales person!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        int orderedqty = Integer.parseInt(txtQty.getText());
        int selectedRow = tblSolutionOffers.getSelectedRow();
        String selectedChannel = (String) validChannelComboBox.getSelectedItem();
        
        if(selectedChannel==null)
        {
            return;
        }

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row to place order for solution offer!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        ArrayList<Product> selectedProducts = (ArrayList<Product>) tblSolutionOffers.getValueAt(selectedRow, 0);
        
        Channel c = business.getChannelCatalog().findChannel(selectedChannel);
        ArrayList<Market> custMList = cp.getMarkets();

        MarketChannelAssignment mca1 = business.getMarketChannelComboCatalog().finMarketChannelCombo(custMList.get(0), c);

        Boolean same1 = false;
        
        if (mca1 != null) {
            
            for(int i=0; i<mca1.getSolutionofferlist().size(); i++){
                
                System.out.println(mca1.getSolutionofferlist().get(i).getProducts());
                System.out.println(selectedProducts);
                same1 = business.getSolutionOfferCatalog().compareProductLists(mca1.getSolutionofferlist().get(i).getProducts(), selectedProducts);
                if(same1){
                    break;
                }
            }
        }
        
        if (same1) {

            MarketChannelAssignment selectedMCA = mca1;

             // Find the matching solution offer
            SolutionOffer matchingSolutionOffer = business.getSolutionOfferCatalog().findMatchingSolutionOffer(selectedMCA, selectedProducts);
            System.out.println("match sol off =="+matchingSolutionOffer.getProducts().get(0).getName());
            
            if (matchingSolutionOffer != null) {
                // Create a new SolutionOrder with the matching solution offer
                SolutionOrder newOrder = business.getMasterSolutionOrderList().newSolutionOrderwithqty(matchingSolutionOffer, selectedMCA, cp.getSalesPerson(), cp, orderedqty);
                System.out.println("New Solution Order created: cust - " + newOrder.getCustomer().getCustomerId());
                                System.out.println("New Solution Order created: cust - " + newOrder.getSalesperson().getPerson().getPersonId());
                System.out.println("New Solution Order created: " + newOrder.getQuantity());
                System.out.println("New Solution Order created: " + newOrder.getSolutionTargetPrice());
            } else {
                // Handle the case where no matching solution offer is found
                System.out.println("No matching solution offer found.");
            }
        }
        
        JOptionPane.showMessageDialog(null, "Placed order successfully!", "Information", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnPlaceOrderActionPerformed

    private void BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackActionPerformed
        // TODO add your handling code here:
        CardSequencePanel.remove(this);
        ((java.awt.CardLayout) CardSequencePanel.getLayout()).next(CardSequencePanel);
    }//GEN-LAST:event_BackActionPerformed

    private void populateCombo() {
        
        validChannelComboBox.removeAllItems();
        
        ArrayList<Market> custMList = cp.getMarkets();
        ArrayList<Channel> custValidchannels = new ArrayList<>();
        
        for(Market m: custMList){
            ArrayList<Channel> validchannels = m.getValidchannels();
            for(Channel c: validchannels){
                custValidchannels.add(c);
            }
        }
        
        // Display valid channels
        for(Channel c : custValidchannels){
          validChannelComboBox.addItem(c.toString());
        }
    }
    
    private void populateSolutionOfferTable() {
        String selectedChannel = (String) validChannelComboBox.getSelectedItem();
        
        if(selectedChannel==null)
        {
            return;
        }
        
        int rc = tblSolutionOffers.getRowCount();
        int i;
        for (i = rc - 1; i >= 0; i--) {
            ((DefaultTableModel) tblSolutionOffers.getModel()).removeRow(i);
        }
        
        //load products to the table
        ArrayList<Market> custMList = cp.getMarkets();
        for(Market m: custMList){
            System.out.println("cust markets --"+m);
            System.out.println("cust channels--"+m.getValidchannels());
        }
        Channel c = business.getChannelCatalog().findChannel(selectedChannel);

        MarketChannelAssignment mca1 = business.getMarketChannelComboCatalog().finMarketChannelCombo(custMList.get(0), c);

        if (mca1 != null) {
            ArrayList<SolutionOffer> solutionOffers1 = mca1.getSolutionofferlist();
            for (SolutionOffer so : solutionOffers1) {
                    ((DefaultTableModel) tblSolutionOffers.getModel()).addRow(new Object[]{so.getProducts(), so.getTp()});
            }
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Back;
    private javax.swing.JButton btnPlaceOrder;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblSolutionOffers;
    private javax.swing.JTextField txtQty;
    private javax.swing.JComboBox<String> validChannelComboBox;
    // End of variables declaration//GEN-END:variables
}
