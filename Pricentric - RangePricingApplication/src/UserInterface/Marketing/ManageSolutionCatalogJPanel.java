/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.Marketing;

import TheBusiness.Business.Business;
import TheBusiness.MarketModel.Channel;
import TheBusiness.MarketModel.ChannelCatalog;
import TheBusiness.MarketModel.Market;
import TheBusiness.MarketModel.MarketCatalog;
import TheBusiness.MarketModel.MarketChannelAssignment;
import TheBusiness.MarketModel.MarketChannelComboCatalog;
import TheBusiness.MarketModel.SolutionOffer;
import TheBusiness.MarketModel.SolutionOfferCatalog;
import TheBusiness.ProductManagement.Product;
import TheBusiness.ProductManagement.ProductCatalog;
import TheBusiness.Supplier.Supplier;
import TheBusiness.Supplier.SupplierDirectory;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author malin
 */
public class ManageSolutionCatalogJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageSolutionCatalogJPanel
     */
    JPanel CardSequencePanel;
    Business business;
    Supplier selectedsupplier;
    Product selectedproduct;
    public ManageSolutionCatalogJPanel(Business bz, JPanel jp) {
        
        CardSequencePanel = jp;
        this.business = bz;
        initComponents();
        populateComboTable();
        populateCombo();
        populateProductTable();
        populateSolutionCatalogTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMarketChannel = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblProducts = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        SuppliersmscComboBox = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        btnCreateSolutionBundle = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblSolutionCatalog = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        btnUpdateSolnB = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 153, 153));

        jLabel1.setText("MANAGE SOLUTION CATALOG");

        tblMarketChannel.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Market", "Channel"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblMarketChannel);
        if (tblMarketChannel.getColumnModel().getColumnCount() > 0) {
            tblMarketChannel.getColumnModel().getColumn(0).setResizable(false);
            tblMarketChannel.getColumnModel().getColumn(1).setResizable(false);
        }

        tblProducts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "Floor price", "Ceiling price", "Target price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblProducts.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tblProducts);
        if (tblProducts.getColumnModel().getColumnCount() > 0) {
            tblProducts.getColumnModel().getColumn(0).setResizable(false);
            tblProducts.getColumnModel().getColumn(1).setResizable(false);
            tblProducts.getColumnModel().getColumn(2).setResizable(false);
            tblProducts.getColumnModel().getColumn(3).setResizable(false);
        }

        jLabel2.setText("Suppliers");

        SuppliersmscComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SuppliersmscComboBoxActionPerformed(evt);
            }
        });

        jLabel8.setText("Product");

        btnCreateSolutionBundle.setText("Create Solution Bundle");
        btnCreateSolutionBundle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateSolutionBundleActionPerformed(evt);
            }
        });

        tblSolutionCatalog.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Market", "Channel", "Products", "Target Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblSolutionCatalog);
        if (tblSolutionCatalog.getColumnModel().getColumnCount() > 0) {
            tblSolutionCatalog.getColumnModel().getColumn(0).setResizable(false);
            tblSolutionCatalog.getColumnModel().getColumn(1).setResizable(false);
            tblSolutionCatalog.getColumnModel().getColumn(2).setResizable(false);
            tblSolutionCatalog.getColumnModel().getColumn(2).setPreferredWidth(300);
            tblSolutionCatalog.getColumnModel().getColumn(3).setResizable(false);
        }

        jLabel3.setText("Update Market-Channel Combo Bundles");

        btnUpdateSolnB.setText("Update Solution Bundle");
        btnUpdateSolnB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateSolnBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(263, 263, 263)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(SuppliersmscComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(57, 57, 57)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(179, 179, 179)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(141, 141, 141)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 530, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(44, 44, 44)
                                .addComponent(btnUpdateSolnB))
                            .addComponent(jLabel3)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(237, 237, 237)
                        .addComponent(btnCreateSolutionBundle)))
                .addContainerGap(425, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SuppliersmscComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnCreateSolutionBundle)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(86, 86, 86)
                        .addComponent(btnUpdateSolnB)))
                .addContainerGap(42, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void SuppliersmscComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SuppliersmscComboBoxActionPerformed
        // TODO add your handling code here:

//        populateProductsTable();
        populateProductTable();
        //String sname = (String) SuppliersComboBox.getSelectedItem();
        //selectedsupplier = business.getSupplierDirectory().findSupplier(sname);

    }//GEN-LAST:event_SuppliersmscComboBoxActionPerformed

    private void btnCreateSolutionBundleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateSolutionBundleActionPerformed
        // TODO add your handling code here:
        tblSolutionCatalog.clearSelection();
        int selectedRow = tblMarketChannel.getSelectedRow();
        int selectedRow1 = tblProducts.getSelectedRow();

        if (selectedRow < 0 || selectedRow1 < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from both market-channel assignment and product tables to create solution offer", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        else
        {
            String suppliername = (String) SuppliersmscComboBox.getSelectedItem();

            MarketChannelComboCatalog mccc = business.getMarketChannelComboCatalog();
            MarketCatalog marketCatalog = business.getMarketCatalog();
            ChannelCatalog channelCatalog = business.getChannelCatalog();

            SupplierDirectory supplierDirectory = business.getSupplierDirectory();
            Supplier supplier = supplierDirectory.findSupplier(suppliername); 
            ProductCatalog productCatalog = supplier.getProductCatalog();
            SolutionOfferCatalog solutionoffercatalog = business.getSolutionOfferCatalog();
            
            String market = tblMarketChannel.getValueAt(selectedRow, 0).toString();
            String channel = tblMarketChannel.getValueAt(selectedRow, 1).toString();
            
            Market m = marketCatalog.findMarket(market);
            Channel c = channelCatalog.findChannel(channel);
            MarketChannelAssignment mc = mccc.finMarketChannelCombo(m, c);
            
            String tproduct= tblProducts.getValueAt(selectedRow1, 0).toString();
            Product product = productCatalog.searchProduct(tproduct);
            
            System.out.println("----- Creating Solution Offers -----");
            
            // Create new solution offer bundles
            SolutionOffer soloff = solutionoffercatalog.newSolutionOffer(mc);
            soloff.addProduct(product);
            System.out.println("sol cat size =="+solutionoffercatalog.getSolutionoffers().size());
            
            // Refresh the solution catalog table
            populateSolutionCatalogTable(); 
        }
        
        tblMarketChannel.clearSelection();
        tblProducts.clearSelection();
        JOptionPane.showMessageDialog(null, "Created solution offer successfully!", "Information", JOptionPane.INFORMATION_MESSAGE);
   
    }//GEN-LAST:event_btnCreateSolutionBundleActionPerformed

    private void btnUpdateSolnBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateSolnBActionPerformed
        // TODO add your handling code here:
        
        tblMarketChannel.clearSelection();
        
        int selectedRow = tblSolutionCatalog.getSelectedRow();
        int selectedRow1 = tblProducts.getSelectedRow();

        if (selectedRow < 0 || selectedRow1 < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from products and solution offer to update", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        else
        {
            String suppliername = (String) SuppliersmscComboBox.getSelectedItem();

            MarketChannelComboCatalog mccc = business.getMarketChannelComboCatalog();
            MarketCatalog marketCatalog = business.getMarketCatalog();
            ChannelCatalog channelCatalog = business.getChannelCatalog();

            SupplierDirectory supplierDirectory = business.getSupplierDirectory();
            Supplier supplier = supplierDirectory.findSupplier(suppliername); 
            ProductCatalog productCatalog = supplier.getProductCatalog();
            SolutionOfferCatalog solutionoffercatalog = business.getSolutionOfferCatalog();
            
            String market = tblSolutionCatalog.getValueAt(selectedRow, 0).toString();
            String channel = tblSolutionCatalog.getValueAt(selectedRow, 1).toString();
            Object productsObject = tblSolutionCatalog.getValueAt(selectedRow, 2);
            ArrayList<Product> products = (ArrayList<Product>) productsObject;
            
            // Create a new ArrayList to store product names
            ArrayList<String> productNames = new ArrayList<>();

            // Iterate through the products ArrayList and add each element to productNames
            for (Product product : products) {
                productNames.add(product.getName());
            }
            Integer tp = Integer.parseInt( tblSolutionCatalog.getValueAt(selectedRow, 3).toString() );
            
            System.out.println(market +" ======" + channel);
//            System.out.println(products.getClass()); // shows datatype of products - arraylist

            Market m = marketCatalog.findMarket(market);
            Channel c = channelCatalog.findChannel(channel);
            MarketChannelAssignment mc = mccc.finMarketChannelCombo(m, c);
            
            String tproduct= tblProducts.getValueAt(selectedRow1, 0).toString();
            Product product = productCatalog.searchProduct(tproduct);
            
            System.out.println("----- Updating Solution Offers -----");

            ArrayList<SolutionOffer> soList = solutionoffercatalog.findSolutionsForMarketChannelCombo(mc);
            System.out.println(soList.size()); // how many mc so are available
            ArrayList<String> checkList = new ArrayList<String>();
            
            for(SolutionOffer so: soList){
                System.out.println("products list of so ---" + so.getProducts());

                for(Product p: so.getProducts()){
                    checkList.add(p.getName());
                }
                
                System.out.println("checkList ---" + checkList);
                System.out.println("comparison ans --"+ checkList.equals(productNames));
                
                if(checkList.equals(productNames)){
                    System.out.println("went inside as same --"+ checkList + products);
                    SolutionOffer soFound = business.getSolutionOfferCatalog().findSingleSolutionOffer(mc, tp);
                    if(soFound.getProducts().contains(product)){
                        JOptionPane.showMessageDialog(null, "Product exists in solution offer!", "Warning", JOptionPane.WARNING_MESSAGE);
                        return;
                    }
                    soFound.addProduct(product);
                }
                checkList.clear();
            }
            
            tblSolutionCatalog.clearSelection();
            tblProducts.clearSelection();
            
            // Refresh the solution catalog table
            populateSolutionCatalogTable(); 
        }
        
        JOptionPane.showMessageDialog(null, "Updated solution offer and bundle prices successfully!", "Information", JOptionPane.INFORMATION_MESSAGE);
   
    }//GEN-LAST:event_btnUpdateSolnBActionPerformed
     
    private void populateComboTable() {
        
        DefaultTableModel dtm=(DefaultTableModel)tblMarketChannel.getModel();
        dtm.setRowCount(0);
        
        for(MarketChannelAssignment mca: business.getMarketChannelComboCatalog().getMcalist())
        {
           Object[] row=new Object[2];
           row[0]=mca.getMarket();
           row[1]=mca.getChannel();
           
           dtm.addRow(row);
        } 
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> SuppliersmscComboBox;
    private javax.swing.JButton btnCreateSolutionBundle;
    private javax.swing.JButton btnUpdateSolnB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tblMarketChannel;
    private javax.swing.JTable tblProducts;
    private javax.swing.JTable tblSolutionCatalog;
    // End of variables declaration//GEN-END:variables

//    private void populateProductsTable() {
//        
//        //clear supplier table
//        SuppliersComboBox.removeAllItems();
//
//        int rc = tblProducts.getRowCount();
//        int i;
//        for (i = rc - 1; i >= 0; i--) {
//            ((DefaultTableModel) tblProducts.getModel()).removeRow(i);
//        }
////load suppliers to the combobox
//
//        ArrayList<Supplier> supplierlist = business.getSupplierDirectory().getSuplierList();
//        System.out.println("Checking..."+supplierlist);
//        if (supplierlist.isEmpty()) {
//            return;
//        }
//        for (Supplier s : supplierlist) {
//            SuppliersComboBox.addItem(s.toString());
//            SuppliersComboBox.setSelectedIndex(0);
//
//            String suppliername = (String) SuppliersComboBox.getSelectedItem();
//
//            selectedsupplier = business.getSupplierDirectory().findSupplier(suppliername);
//
//            ProductCatalog pc = selectedsupplier.getProductCatalog();
//
//            for (Product pt : pc.getProductList()) {
//
//                Object[] row = new Object[4];
//                row[0] = pt;
//                row[1] = pt.getFloorPrice();
//                row[2] = pt.getCeilingPrice();
//                row[3] = pt.getTargetPrice();
//
//                ((DefaultTableModel) tblProducts.getModel()).addRow(row);
//            }
//
//        }
//    }
//    
//     public void refreshTable() {
//
////clear supplier table
//        int rc = tblProducts.getRowCount();
//        int i;
//        for (i = rc - 1; i >= 0; i--) {
//            ((DefaultTableModel) tblProducts.getModel()).removeRow(i);
//        }
//
//        String suppliername = (String) SuppliersComboBox.getSelectedItem();
//
//        selectedsupplier = business.getSupplierDirectory().findSupplier(suppliername);
//        if (selectedsupplier == null) {
//            return;
//        }
//        ProductCatalog pc = selectedsupplier.getProductCatalog();
//
//        for (Product pt : pc.getProductList()) {
//
//            Object[] row = new Object[4];
//            row[0] = pt;
//            row[1] = pt.getFloorPrice();
//            row[2] = pt.getCeilingPrice();
//            row[3] = pt.getTargetPrice();
//            ((DefaultTableModel) tblProducts.getModel()).addRow(row);
//        }
//
//    }
     
    
    private void populateCombo() {
        
        SuppliersmscComboBox.removeAllItems();
        for(Supplier s : business.getSupplierDirectory().getSuplierList())
        {
          SuppliersmscComboBox.addItem(s.toString());
        }
    }
     
    private void populateProductTable() {
        String suppliername = (String) SuppliersmscComboBox.getSelectedItem();

        selectedsupplier = business.getSupplierDirectory().findSupplier(suppliername);
        if(selectedsupplier==null)
        {
            return;
        }
        
        DefaultTableModel model = (DefaultTableModel) tblProducts.getModel();
        model.setRowCount(0);

        for (Product pt : selectedsupplier.getProductCatalog().getProductList()) {
            Object row[] = new Object[4];
             row[0] = pt;
             row[1] = pt.getFloorPrice();
             row[2] = pt.getCeilingPrice();
             row[3] = pt.getTargetPrice();
            model.addRow(row);
        }
    }
     
    private void populateSolutionCatalogTable() {
        
         DefaultTableModel dtm=(DefaultTableModel)tblSolutionCatalog.getModel();
        dtm.setRowCount(0);
        
        for(SolutionOffer so: business.getSolutionOfferCatalog().getSolutionoffers())
        {
           Object[] row=new Object[6];
           row[0]=so.getMarketchannelcomb().getMarket();
           row[1]=so.getMarketchannelcomb().getChannel();
           row[2]=so.getProducts();
           row[3]=so.getTp();
           
            dtm.addRow(row);
        } 
    }
}
